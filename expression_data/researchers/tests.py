"""
This module contains tests for the :mod:`researchers` app.

Currently it contains ModelTests for:

* :class:`~researchers.models.Researcher` objects as :class:`~researchers.tests.ResearcherModelTests`

and a ViewTest

* :class:`~researchers.tests.ResearcherViewTests`

"""

from django.test import TestCase
from django.test.client import Client
from django.contrib.auth.models import User

from researchers.models import Researcher

MODELS = [Researcher,]

class ResearcherModelTests(TestCase):
    '''This class tests various aspects of the :class:`~researchers.models.Researcher` model.'''

    #fixtures = [, ]

    def setUp(self):
        '''Instantiate the test client.  Creates a test user.'''
        self.client = Client()
        self.test_user = User.objects.create_user('testuser', 'blah@blah.com', 'testpassword')
        self.test_user.is_superuser = True
        self.test_user.is_active = True
        self.test_user.first_name = "Joe"
        self.test_user.last_name = "Blow"
        self.test_user.save()
        self.assertEqual(self.test_user.is_superuser, True)
        login = self.client.login(username='testuser', password='testpassword')
        self.failUnless(login, 'Could not log in')
    
    def tearDown(self):
        '''Depopulate created model instances from test database.'''
        for model in MODELS:
            for obj in model.objects.all():
                obj.delete()
                
    def test_created_new_researcher(self):
        '''This test that a :class:`~researchers.models.Researcher` was generated by the setUp function.'''
         
        test_researchers = Researcher.objects.all()
        self.assertEqual(test_researchers.count(), 1) #presumes no researchers loaded in fixture data
         
    def test_update_researcher(self):
        '''This test that a :class:`~researchers.models.Researcher` can be updated.'''

        test_researcher = Researcher.objects.get(pk=1)  
        self.assertEqual(test_researcher.current_lab_member, False)    
        test_researcher.current_lab_member = True
        test_researcher.save()   
        self.assertEqual(test_researcher.current_lab_member, True) 
        
    def test_researcher_unicode(self):
        '''This tests that the unicode representation of a :class:`~researchers.models.Researcher` is set as its full name.'''               
        
        test_researcher = Researcher.objects.get(pk=1) 
        self.assertEqual(test_researcher.__unicode__(), "Joe Blow") 
        
    def test_researcher_absolute_url(self):
        '''This tests that the absolute url of a object is **/researcher/1**.'''
        
        test_researcher = Researcher.objects.get(pk=1) 
        self.assertEqual(test_researcher.get_absolute_url(), "/researcher/1")  
        
class ResearcherViewTests(TestCase):
    '''This class tests the views for :class:`~researchers.models.Researcher` objects.'''

    #fixtures = [,]

    def setUp(self):
        """Instantiate the test client.  Creates a test user."""
        
        self.client = Client()
        self.test_user = User.objects.create_user('testuser', 'blah@blah.com', 'testpassword')
        self.test_user.is_superuser = True
        self.test_user.is_active = True
        self.test_user.save()
        self.assertEqual(self.test_user.is_superuser, True)
        login = self.client.login(username='testuser', password='testpassword')
        self.failUnless(login, 'Could not log in')

    def tearDown(self):
        """Depopulate created model instances from test database."""
        for model in MODELS:
            for obj in model.objects.all():
                obj.delete()

    def test_researcher_detail_view(self):
        """This tests the researcher-detail view, ensuring that templates are loaded correctly.  

        This view uses a user with superuser permissions so does not test the permission levels for this view."""
        
        test_response = self.client.get('/researcher/1')
        self.assertEqual(test_response.status_code, 200)
        self.assertTrue('researcher' in test_response.context)        
        self.assertTemplateUsed(test_response, 'researcher-detail.html')
        self.assertEqual(test_response.context['researcher'].pk, 1)
        
        #tests a nonfunctional url
        test_response = self.client.get('/researcher/198723423')
        self.assertEqual(test_response.status_code, 404)